{"prompt": "Create a query to retrieve the names and email addresses of all students in the Computer Science department.", "schema": "CREATE TABLE Students (\n    StudentID INT PRIMARY KEY,\n    FirstName VARCHAR(255),\n    LastName VARCHAR(255),\n    Email VARCHAR(255),\n    DepartmentID INT,\n    FOREIGN KEY (DepartmentID) REFERENCES Departments(DepartmentID)\n);\n\nCREATE TABLE Departments (\n    DepartmentID INT PRIMARY KEY,\n    DepartmentName VARCHAR(255)\n);", "query": "SELECT FirstName, LastName, Email FROM Students WHERE DepartmentID = (SELECT DepartmentID FROM Departments WHERE DepartmentName = 'Computer Science');"}
{"prompt": "Show me the total number of students enrolled in each department.", "schema": "CREATE TABLE Students (\n    StudentID INT PRIMARY KEY,\n    FirstName VARCHAR(255),\n    LastName VARCHAR(255),\n    Email VARCHAR(255),\n    DepartmentID INT,\n    FOREIGN KEY (DepartmentID) REFERENCES Departments(DepartmentID)\n);\n\nCREATE TABLE Departments (\n    DepartmentID INT PRIMARY KEY,\n    DepartmentName VARCHAR(255)\n);", "query": "SELECT d.DepartmentName, COUNT(s.StudentID) AS TotalStudents\nFROM Departments d\nLEFT JOIN Students s ON d.DepartmentID = s.DepartmentID\nGROUP BY d.DepartmentName;"}
{"prompt": "List the names of all courses offered by the Physics department.", "schema": "CREATE TABLE Courses (\n    CourseID INT PRIMARY KEY,\n    CourseName VARCHAR(255),\n    DepartmentID INT,\n    Credits INT,\n    FOREIGN KEY (DepartmentID) REFERENCES Departments(DepartmentID)\n);\n\nCREATE TABLE Departments (\n    DepartmentID INT PRIMARY KEY,\n    DepartmentName VARCHAR(255)\n);", "query": "SELECT CourseName FROM Courses WHERE DepartmentID = (SELECT DepartmentID FROM Departments WHERE DepartmentName = 'Physics');"}
{"prompt": "Find the average grade of students in the 'Introduction to Programming' course.", "schema": "CREATE TABLE Enrollments (\n    EnrollmentID INT PRIMARY KEY,\n    StudentID INT,\n    CourseID INT,\n    Grade CHAR(1),\n    FOREIGN KEY (StudentID) REFERENCES Students(StudentID),\n    FOREIGN KEY (CourseID) REFERENCES Courses(CourseID)\n);\n\nCREATE TABLE Courses (\n    CourseID INT PRIMARY KEY,\n    CourseName VARCHAR(255),\n    DepartmentID INT,\n    Credits INT\n);\n\nCREATE TABLE Students (\n    StudentID INT PRIMARY KEY,\n    FirstName VARCHAR(255),\n    LastName VARCHAR(255),\n    Email VARCHAR(255),\n    DepartmentID INT\n);", "query": "SELECT AVG(Grade) FROM Enrollments WHERE CourseID = (SELECT CourseID FROM Courses WHERE CourseName = 'Introduction to Programming');"}
{"prompt": "Which instructors teach more than two courses?", "schema": "CREATE TABLE Instructors (\n    InstructorID INT PRIMARY KEY,\n    FirstName VARCHAR(255),\n    LastName VARCHAR(255),\n    DepartmentID INT,\n    FOREIGN KEY (DepartmentID) REFERENCES Departments(DepartmentID)\n);\n\nCREATE TABLE Courses (\n    CourseID INT PRIMARY KEY,\n    CourseName VARCHAR(255),\n    DepartmentID INT,\n    Credits INT,\n    InstructorID INT,\n    FOREIGN KEY (InstructorID) REFERENCES Instructors(InstructorID),\n    FOREIGN KEY (DepartmentID) REFERENCES Departments(DepartmentID)\n);\n\nCREATE TABLE Departments (\n    DepartmentID INT PRIMARY KEY,\n    DepartmentName VARCHAR(255)\n);", "query": "SELECT i.FirstName, i.LastName\nFROM Instructors i\nJOIN Courses c ON i.InstructorID = c.InstructorID\nGROUP BY i.InstructorID\nHAVING COUNT(c.CourseID) > 2;"}
{"prompt": "List all students who have taken a course in the Math department and received a grade of 'A'.", "schema": "CREATE TABLE Enrollments (\n    EnrollmentID INT PRIMARY KEY,\n    StudentID INT,\n    CourseID INT,\n    Grade CHAR(1),\n    FOREIGN KEY (StudentID) REFERENCES Students(StudentID),\n    FOREIGN KEY (CourseID) REFERENCES Courses(CourseID)\n);\n\nCREATE TABLE Courses (\n    CourseID INT PRIMARY KEY,\n    CourseName VARCHAR(255),\n    DepartmentID INT,\n    Credits INT\n);\n\nCREATE TABLE Students (\n    StudentID INT PRIMARY KEY,\n    FirstName VARCHAR(255),\n    LastName VARCHAR(255),\n    Email VARCHAR(255),\n    DepartmentID INT\n);\n\nCREATE TABLE Departments (\n    DepartmentID INT PRIMARY KEY,\n    DepartmentName VARCHAR(255)\n);", "query": "SELECT s.FirstName, s.LastName\nFROM Students s\nJOIN Enrollments e ON s.StudentID = e.StudentID\nJOIN Courses c ON e.CourseID = c.CourseID\nJOIN Departments d ON c.DepartmentID = d.DepartmentID\nWHERE d.DepartmentName = 'Math' AND e.Grade = 'A';"}
{"prompt": "Find the names of all departments that offer at least one course with more than 3 credits.", "schema": "CREATE TABLE Courses (\n    CourseID INT PRIMARY KEY,\n    CourseName VARCHAR(255),\n    DepartmentID INT,\n    Credits INT\n);\n\nCREATE TABLE Departments (\n    DepartmentID INT PRIMARY KEY,\n    DepartmentName VARCHAR(255)\n);", "query": "SELECT d.DepartmentName\nFROM Departments d\nJOIN Courses c ON d.DepartmentID = c.DepartmentID\nWHERE c.Credits > 3\nGROUP BY d.DepartmentName\nHAVING COUNT(c.CourseID) >= 1;"}
{"prompt": "Show me the names of all students who are enrolled in the course 'Database Management'.", "schema": "CREATE TABLE Enrollments (\n    EnrollmentID INT PRIMARY KEY,\n    StudentID INT,\n    CourseID INT,\n    Grade CHAR(1)\n);\n\nCREATE TABLE Courses (\n    CourseID INT PRIMARY KEY,\n    CourseName VARCHAR(255),\n    DepartmentID INT,\n    Credits INT\n);\n\nCREATE TABLE Students (\n    StudentID INT PRIMARY KEY,\n    FirstName VARCHAR(255),\n    LastName VARCHAR(255),\n    Email VARCHAR(255),\n    DepartmentID INT\n);", "query": "SELECT s.FirstName, s.LastName\nFROM Students s\nJOIN Enrollments e ON s.StudentID = e.StudentID\nJOIN Courses c ON e.CourseID = c.CourseID\nWHERE c.CourseName = 'Database Management';"}
{"prompt": "What is the average number of credits for courses offered by the Biology department?", "schema": "CREATE TABLE Courses (\n    CourseID INT PRIMARY KEY,\n    CourseName VARCHAR(255),\n    DepartmentID INT,\n    Credits INT\n);\n\nCREATE TABLE Departments (\n    DepartmentID INT PRIMARY KEY,\n    DepartmentName VARCHAR(255)\n);", "query": "SELECT AVG(Credits)\nFROM Courses\nWHERE DepartmentID = (SELECT DepartmentID FROM Departments WHERE DepartmentName = 'Biology');"}
{"prompt": "List the names of all instructors who teach at least one course with the substring 'Data'.", "schema": "CREATE TABLE Instructors (\n    InstructorID INT PRIMARY KEY,\n    FirstName VARCHAR(255),\n    LastName VARCHAR(255),\n    DepartmentID INT\n);\n\nCREATE TABLE Courses (\n    CourseID INT PRIMARY KEY,\n    CourseName VARCHAR(255),\n    DepartmentID INT,\n    Credits INT,\n    InstructorID INT\n);\n\nCREATE TABLE Departments (\n    DepartmentID INT PRIMARY KEY,\n    DepartmentName VARCHAR(255)\n);", "query": "SELECT DISTINCT i.FirstName, i.LastName\nFROM Instructors i\nJOIN Courses c ON i.InstructorID = c.InstructorID\nWHERE c.CourseName LIKE '%Data%';"}
{"prompt": "Find the student with the highest GPA.", "schema": "CREATE TABLE Students (\n    StudentID INT PRIMARY KEY,\n    FirstName VARCHAR(255),\n    LastName VARCHAR(255),\n    Email VARCHAR(255),\n    DepartmentID INT,\n    GPA DECIMAL(3, 2)\n);", "query": "SELECT FirstName, LastName\nFROM Students\nORDER BY GPA DESC\nLIMIT 1;"}
{"prompt": "Show me the names of all courses that are offered in the Fall semester.", "schema": "CREATE TABLE Courses (\n    CourseID INT PRIMARY KEY,\n    CourseName VARCHAR(255),\n    DepartmentID INT,\n    Credits INT\n);\n\nCREATE TABLE CourseOfferings (\n    OfferingID INT PRIMARY KEY,\n    CourseID INT,\n    Semester VARCHAR(20),\n    Year INT,\n    InstructorID INT\n);", "query": "SELECT c.CourseName\nFROM Courses c\nJOIN CourseOfferings co ON c.CourseID =